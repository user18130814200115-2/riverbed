#!/bin/sh

exec_location="$HOME/.config/river"

external_settings() {

	# Calculate derived settings
	display_height=$(wlr-randr --json | jq '.[].modes.[].height')
	display_width=$(wlr-randr --json | jq '.[].modes.[].width')


	if [ "$layout" = 'runoff' ]; then
		bar_width=$(echo "($display_width - (3 * $gaps)) * (1 - $main_ratio)" | bc -l | sed 's/\..*$//g')
		bar_left=$(($display_width - $bar_width - $gaps))
		bar_right=$gaps
	elif [ "$layout" = 'dual' ]; then
		bar_width=$(echo "($display_width - (3 * $gaps)) * $main_ratio " | bc -l | sed 's/\..*$//g')
		bar_left=$((($display_width - $bar_width + $gaps) / 2 - $gaps))
		bar_right=$(((($display_width - $bar_width + $gaps) / 2)))
	elif [ "$layout" = 'grid' ]; then
		bar_width=$(echo "($display_width - (2 * $gaps))" | bc -l | sed 's/\..*$//g')
		bar_left=$gaps
		bar_right=$gaps
	fi

# Tell the various components of the desktop relevant information

# Dbus
riverctl spawn 'dbus-update-activation-environment XDG_CURRENT_DESKTOP WAYLAND_DISPLAY QT_STYLE_OVERRIDE QT_QPA_PLATFORM'

# luatile
file="$HOME/.config/river-luatile/riverbed-autogen.lua"
echo "\
-- This file is automatically generated by river init
gaps = $gaps
main_ratio = $main_ratio
display_height = $display_height
bar_height = $bar_height
layout = '$layout'
columns = $columns
dynamic_columns = $dynamic_columns
" > $file
riverctl send-layout-cmd luatile 'update_variables()'

# waybar
file="$HOME/.config/waybar/riverbed-autogen.css"
echo "\
/* This file is automatically generated by river init */
* {
	all: unset;
	font-family: ${font}
}

box:not(.modules-left):not(.modules-right):not(.modules-center):not(#tags){
	margin-left: ${bar_left}px;
	margin-right: ${bar_right}px;
	margin-top: ${gaps}px;
	border-width: ${border_size}px;
	background: #${window_color};
	border-color: #${border_color};
}

tooltip * {
	color: #${text_color};
	padding: ${padding}px
}

window#waybar {
	color: #${text_color};
	background: transparent;
}
" > $file

file="$HOME/.config/waybar/riverbed-autogen.jsonc"
oldheight=$(cat $file | grep "height\":" | grep -o "[0-9][0-9]*")
if [ "$oldheight" != "$((bar_height + $gaps))" ]; then
echo "\
{
// These lines will be updated automatically by river/init 
\"height\": $(($bar_height + $gaps)),
// END
}\
" > $file
killall waybar
riverctl spawn waybar
fi

# wob
file="$HOME/.config/wob/wob.ini"
echo "\
;These lines will be updated automatically by river/init
margin=-$bar_height $bar_right 0 0
height=$bar_height
width=$bar_width
bar_padding=$(($border_size - 4))
;END
$(tail -n +7 $file)\
" > $file
setup_deamon &

# fnott
file="$HOME/.config/fnott/fnott.ini"
echo "\
#These lines will be updated automatically by river/init
edge-margin-vertical = -$bar_height
edge-margin-horizontal = $bar_right
max-height = $bar_height
min-width = $bar_width
border-size = $border_size
background = ${window_color}ff
border-color = ${border_color}ff
title-color = ${text_color}ff
summary-color = ${text_color}ff
body-color = ${text_color}ff
notification-margin = ${gaps}
padding-vertical = ${padding}
padding-horizontal = ${padding}
title-font = ${font}:pixelsize=16
summary-font = ${font}:size=11
body-font = ${font}:size=11
#END
$(tail -n +19 $file)\
" > $file
killall fnott
riverctl spawn fnott

# tofi
file="$HOME/.config/tofi/riverbed-autogen"
echo "\
# This file is automatically generated by river init
margin-top = $gaps
margin-right = $bar_right 
height = $bar_height
width = $bar_width
border-width = $border_size
background-color = #${window_color}
text-color = #${text_color}
border-color = #${border_color}
" > $file

# gtklock
file="$HOME/.config/gtklock/riverbed-autogen.css"
echo "\
/* This file is automatically generated by river init */
button, entry{
	padding: ${padding}px;
	background-color: #${window_color};
	border-color: #${border_color};
	border-width: ${border_size}px;
	border-style: solid;
	background-color: #${window_color};
}
window {
	color: #$text_color;
	background-image: url(\"$background\");
}
" > $file

# foot
file="$HOME/.config/foot/riverbed-autogen.ini"
echo "\
# This file is automatically generated by river init
[main]
pad=${padding}x${padding}
font=${monofont}:size=9

[colors]
background=${window_color}
foreground=${text_color}
" > $file

}

internal_settings() {
	# Apply user settings
	riverctl background-color 0x$background_color
	killall wbg
	riverctl spawn "wbg $background"
	riverctl border-color-focused 0x$border_color
	riverctl border-color-unfocused 0x$border_color_inactive
	riverctl border-width $border_size
	riverctl xcursor-theme "$cursor_theme"
}

# Wob deamon
setup_deamon() {
	location="$XDG_RUNTIME_DIR/wob"
	ps | grep -m 1 "[0-9] tail -f -s 0 $location" | sed 's/^ //g' | cut -d" " -f1 | xargs kill
	#[ -d "$location" ] || mkdir "$location"
	[ -e "$XDG_RUNTIME_DIR/wob" ] || mkfifo "$location"
	( tail -f -s 0 "$location" | wob ) &
}

# Auto start all applications
autostart() {
	cat "$exec_location/autostart" | while read application
	do
		riverctl spawn "$application"
	done
}

defaults() {
	# Set sane default rules
	riverctl rule-add -app-id popup float
	riverctl rule-add -app-id "Gimp*" no-float
	riverctl rule-add -app-id  xdg-desktop-portal-lxqt float
	riverctl default-attach-mode bottom
	riverctl default-layout luatile

	riverctl map-switch normal lid close spawn 'gtklock -d && wlr-randr --output eDP-1 --off'
	riverctl map-switch locked lid close spawn 'wlr-randr --output eDP-1 --off'
	riverctl map-switch normal lid open spawn 'wlr-randr --output eDP-1 --on'
	riverctl map-switch locked lid open spawn 'wlr-randr --output eDP-1 --on'
}

customs() {
	# Apply custom user rules
	cat "$exec_location/custom" | while read line
	do
		[ -z "$line" ] ||  ([ "${line#\#} == ${line}" ] && echo "riverctl $line" | sh)
	done
} 

reload_keybinds() {
	source "$exec_location/keybinds"
}

reload_configs() {
	# Retrieve user settings
	while read line
	do
		eval $line
	done < "$exec_location/variables"

	reload_keybinds &
	internal_settings &
	defaults &
	external_settings &
	customs &
}


# MAIN EXEC Line

riverctl spawn gtklock

reload_configs

riverctl spawn waybar
riverctl spawn tofi-polkit-agent
riverctl spawn libinput-gestures
riverctl spawn pipewire
riverctl spawn pipewire-pulse
riverctl spawn wireplumber
riverctl spawn river-luatile

autostart

# Setup listener
mkfifo "$XDG_RUNTIME_DIR/riverbed"
tail -f -s 0 "$XDG_RUNTIME_DIR/riverbed" | while read line; do
	echo $line
	eval ${line}
	internal_settings &
	external_settings &
done
