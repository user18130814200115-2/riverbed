#!/bin/sh

exec_location="$HOME/.config/river"

get_settings() {
	# Retrieve user settings
	while read line
	do
		eval $line
	done < "$exec_location/variables"

	source "$exec_location/keybinds"

	# Calculate derived settings
	display_height=$(wlr-randr --json | jq '.[].modes.[].height')
	display_width=$(wlr-randr --json | jq '.[].modes.[].width')
	bar_width=$(echo "($display_width - 2 * $gaps * $main_ratio) - 100" | bc -l | sed 's/\..*$//g')

}

external_settings() {
	# Tell the various components of the desktop relevant information
	# luatile
	file="$HOME/.config/river-luatile/riverbed-autogen.lua"
	echo "\
-- These lines will be automatically updated by river/init
gaps = $gaps
main_ratio = $main_ratio
display_height = $display_height
-- END\
" > $file

	# waybar
	file="$HOME/.config/waybar/riverbed-autogen.css"
	echo "\
/* These lines will be updated automatically by river/init */
box:not(.modules-left):not(.modules-right):not(.modules-center):not(#tags){
	margin-left: calc((${display_width}px - 2 * ${gaps}px )* $main_ratio + ${gaps}px - ${gaps}px * ($main_ratio - 1));
	margin-right: ${gaps}px;
	margin-top: ${gaps}px;
	border-width: ${border_size}px;
	background: #${window_color};
	border-color: #${border_color};
}
/* END*/\
" > $file

	file="$HOME/.config/waybar/riverbed-autogen.jsonc"
	echo "\
{
   // These lines will be updated automatically by river/init 
   \"height\": $(($bar_height + $gaps)),
   // END
}\
" > $file

	# wob
	file="$HOME/.config/wob/wob.ini"
	echo "\
;These lines will be updated automatically by river/init
margin=-$bar_height $gaps 0 0
height=$bar_height
width=$bar_width
bar_padding=$(($border_size - 4))
;END
$(tail -n +7 $file)\
" > $file

	# fnott
	file="$HOME/.config/fnott/fnott.ini"
	echo "\
#These lines will be updated automatically by river/init
edge-margin-vertical = -$bar_height
edge-margin-horizontal = $gaps
max-height = $bar_height
min-width = $bar_width
border-size = $border_size
background = ${window_color}ff
border-color = ${border_color}ff
title-color = ${text_color}ff
summary-color = ${text_color}ff
body-color = ${text_color}ff
#END
$(tail -n +13 $file)\
" > $file

	# tofi
	file="$HOME/.config/tofi/riverbed-autogen"
	echo "\
#These lines will be updated automatically by river/init
margin-top = $gaps
margin-right = $gaps
height = $bar_height
width = $bar_width
border-width = $border_size
background-color = #${window_color}
text-color = #${text_color}
border-color = #${border_color}
#END\
" > $file

	# gtklock
	file="$HOME/.config/gtklock/riverbed-autogen.css"
	echo "\
/* These lines will be updated automatically by river/init */
button, entry{
	padding: ${gaps}px
}
/* END*/\
" > $file
}

internal_settings() {
	# Apply user settings
	riverctl background-color 0x$background_color
	riverctl spawn "wbg $background"
	riverctl border-color-focused 0x$border_color
	riverctl border-color-unfocused 0x$border_color_inactive
	riverctl border-width $border_size
	riverctl xcursor-theme "$cursor_theme"
}

# Wob deamon
setup_deamon() {
	location="$XDG_RUNTIME_DIR/wob"
	ps | grep -m 1 "[0-9] tail -f -s 0 $location/$1" | sed 's/^ //g' | cut -d" " -f1 | xargs kill
	mkdir "$location"
	mkfifo "$location/$1"
	( tail -f -s 0 "$location/$1" | wob ) &
}

# Auto start all applications
autostart() {
	cat "$exec_location/autostart" | while read application
	do
		riverctl spawn "$application"
	done
}

defaults() {
	# Set sane default rules
	riverctl rule-add -app-id lxqt-policykit-agent float
	riverctl rule-add -app-id popup float
	riverctl rule-add -app-id "Gimp*" no-float
	riverctl default-attach-mode bottom
	riverctl default-layout "$layout_namespace"
	killall "$layout_engine"
	riverctl spawn "$layout_engine"

	riverctl map-switch normal lid close spawn 'gtklock -d && wlr-randr --output eDP-1 --off'
	riverctl map-switch locked lid close spawn 'wlr-randr --output eDP-1 --off'
	riverctl map-switch normal lid open spawn 'wlr-randr --output eDP-1 --on'
	riverctl map-switch locked lid open spawn 'wlr-randr --output eDP-1 --on'
}

customs() {
	# Apply custom user rules
	cat "$exec_location/custom" | while read line
	do
		[ -z "$line" ] || riverctl $line
	done
} 

reload_configs() {
	# Retrieve user settings
	while read line
	do
		eval $line
	done < "$exec_location/variables"

	source "$exec_location/keybinds"

	# Calculate derived settings
	display_height=$(wlr-randr --json | jq '.[].modes.[].height')
	display_width=$(wlr-randr --json | jq '.[].modes.[].width')
	bar_width=$(echo "($display_width - 2 * $gaps) * (1 - $main_ratio) + $gaps * ($main_ratio - 1)" | bc -l | sed 's/\..*$//g')
	
	internal_settings &
	defaults &
	external_settings &
	customs &
	wait
	setup_deamon brightness
	setup_deamon volume
}

if [ "$1" = "reload" ]; then
	reload_configs
	killall fnott
	riverctl spawn fnott
else
	riverctl spawn gtklock
	reload_configs
	autostart
fi

