#!/bin/sh

# First we lock the screen for login purposes
riverctl spawn gtklock

exec_location="$HOME/.config/river"

# Retrieve user settings
while read line
do
	eval $line
done < "$exec_location/variables"

source "$exec_location/keybinds"

# Calculate derived settings
display_height=$(wlr-randr --json | jq '.[].modes.[].height')
display_width=$(wlr-randr --json | jq '.[].modes.[].width')
bar_width=$(echo "$display_width * (1 - $main_ratio)" | bc -l | sed 's/\..*$//g')

# Tell the various components of the desktop relevant information
# luatile
file="$HOME/.config/river-luatile/layout.lua"
echo "\
-- These lines will be automatically updated by river/init
local gaps = $gaps
local main_ratio = $main_ratio
local display_height = $display_height
-- END
$(tail -n +6 $file)\
" > $file

# waybar
file="$HOME/.config/waybar/style.css"
echo "\
/* These lines will be updated automatically by river/init */
box:not(.modules-left):not(.modules-right):not(.modules-center):not(#tags){
	margin-left: calc(${display_width}px * $main_ratio + ${border_size}px);
	margin-right: ${gaps}px;
	margin-top: ${gaps}px;
	border-width: ${border_size}px;
	background: #${window_color};
	border-color: #${border_color};
}
/* END*/
$(tail -n +11 $file)\
" > $file

file="$HOME/.config/waybar/config.jsonc"
echo "\
{
   // These lines will be updated automatically by river/init 
   \"height\": $(($bar_height + $gaps)),
   // END
$(tail -n +5 $file)\
" > $file

# wob
file="$HOME/.config/wob/wob.ini"
echo "\
;These lines will be updated automatically by river/init
margin=-$bar_height $gaps 0 0
height=$bar_height
width=$(($bar_width - $gaps - $border_size))
bar_padding=$(($border_size - 4))
;END
$(tail -n +7 $file)\
" > $file

# fnott
file="$HOME/.config/fnott/fnott.ini"
echo "\
#These lines will be updated automatically by river/init
edge-margin-vertical = -$bar_height
edge-margin-horizontal = $gaps
max-height = $bar_height
min-width = $(($bar_width - $gaps - $border_size))
border-size = $border_size
background = ${window_color}ff
border-color = ${border_color}ff
title-color = ${text_color}ff
summary-color = ${text_color}ff
body-color = ${text_color}ff
#END
$(tail -n +13 $file)\
" > $file

# tofi
file="$HOME/.config/tofi/config"
echo "\
#These lines will be updated automatically by river/init
margin-top = $gaps
margin-right = $gaps
height = $bar_height
width = $(($bar_width - $gaps - $border_size))
border-width = $border_size
background-color = #${window_color}
text-color = #${text_color}
border-color = #${border_color}
#END
$(tail -n +11 $file)\
" > $file

# Auto start all applications
cat "$exec_location/autostart" | while read application
do
	riverctl spawn "$application"
done
riverctl spawn 'aplay -r 8000 -f S16_LE /dev/zero'
## Special code for starting wob
if command -v wob &> /dev/null;
then
	setup_deamon() {
		mkfifo "$location/$1"
		tail -f -s 0 "$location/$1" | wob

	}

	location="$XDG_RUNTIME_DIR/wob"
	mkdir "$location"
	setup_deamon brightness &
	setup_deamon volume &
fi

# Apply user settings
riverctl background-color $background_color
riverctl spawn "wbg $background"
riverctl border-color-focused 0x$border_color
riverctl border-color-unfocused 0x$broder_color_inactive
riverctl border-width $border_width
riverctl xcursor-theme "$cursor_theme"
riverctl spawn 'aplay -r 8000 -f S16_LE /dev/zero'

# Set sane default rules
riverctl rule-add -app-id lxqt-policykit-agent float
riverctl rule-add -app-id popup float
riverctl rule-add -app-id "Gimp*" no-float
riverctl default-attach-mode bottom
riverctl default-layout luatile

# Apply custom user rules
cat "$exec_location/custom" | while read line
do
	riverctl $line
done

river-luatile &
